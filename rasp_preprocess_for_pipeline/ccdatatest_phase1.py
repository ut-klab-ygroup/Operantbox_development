import h5py

# 既存のHDF5ファイル名
input_filename = "Z:\D2behavior\prj5-5\\3CSRTT-phase1\cond_rasp-exp\TO36\day01-phase1S01_\\20240415-121714_11_3CSRTT_MAP-Sul-task-noSDS-vstim_SU222_day01-phase1S01___cc_data.h5"
# 新しいHDF5ファイル名
output_filename = 'Z:\D2behavior\prj5-5\\3CSRTT-phase1\cond_rasp-exp\TO36\day01-phase1S01_\\240607-191732_5-5_3CSRTT-phase1_Sul_TO036_day01-phase1S01___cc_data.h5'

import h5py
import numpy as np
import pandas as pd

###   現状ではconfigに相当する
# HDF5ファイル名
#input_filename = 'your_input_file.h5'

# CSVファイルのパス
#csv_path = "Z:\D2behavior\prj5-5\\3CSRTT-phase1\\results_files\\results-240608-183536.csv"
csv_path = "Z:\D2behavior\prj5-5\\3CSRTT-phase1\\results_files\\results-240606-192656.csv"
#csv_path = "Z:\D2behavior\prj5-5\\3CSRTT-phase1\\results_files\\results-240607-191732.csv"
# HDF5ファイルのパス
hdf5_path = input_filename
# データセット名のリスト
datasets = ['Lick', 'NP0', 'NP1', 'NP2', 'NP3', 'NP4']

# 更新するtrial_numのリスト
trial_nums =  [i for i in range(100)]  # 例として
# 各trialの開始時間を記録しているリスト
#start_time_list =[1717755452.937, 1717755475.023, 1717755496.072, 1717755515.129, 1717755531.19, 1717755555.267, 1717755571.313, 1717755591.368, 1717755612.428, 1717755630.471, 1717755649.533, 1717755664.592, 1717755681.634, 1717755696.687, 1717755720.748, 1717755736.794, 1717755753.838, 1717755771.88, 1717755787.928, 1717755807.972, 1717755832.033, 1717755855.087, 1717755875.127, 1717755898.189, 1717755915.231, 1717755930.271, 1717755949.309, 1717755966.348, 1717755989.39, 1717756008.428, 1717756024.46, 1717756040.493, 1717756062.547, 1717756085.603, 1717756100.634, 1717756123.677, 1717756144.717, 1717756161.756, 1717756183.802, 1717756198.833, 1717756220.872, 1717756242.923, 1717756266.971, 1717756286.01, 1717756308.057, 1717756328.127, 1717756345.164, 1717756363.212, 1717756383.254, 1717756401.29, 1717756424.337, 1717756445.374, 1717756461.409, 1717756482.462, 1717756501.494, 1717756519.53, 1717756534.562, 1717756558.607, 1717756577.657, 1717756592.694, 1717756615.735, 1717756636.777, 1717756651.81, 1717756669.854, 1717756687.907, 1717756708.948, 1717756728.992, 1717756753.032, 1717756774.075, 1717756789.103, 1717756805.157, 1717756828.218, 1717756845.266, 1717756869.319, 1717756893.368, 1717756913.412, 1717756935.47, 1717756955.511, 1717756971.552, 1717756989.594, 1717757006.627, 1717757022.667, 1717757039.705, 1717757061.747, 1717757081.786, 1717757105.834, 1717757127.879, 1717757142.918, 1717757162.956, 1717757180.991, 1717757200.032, 1717757223.075, 1717757241.13, 1717757262.173, 1717757279.21, 1717757298.247, 1717757319.286, 1717757342.33, 1717757366.369, 1717757388.402]
start_time_list=[1717669617.096, 1717669639.222, 1717669660.257, 1717669679.291, 1717669695.323, 1717669719.364, 1717669735.396, 1717669755.428, 1717669776.467, 1717669794.503, 1717669813.54, 1717669828.571, 1717669845.605, 1717669860.644, 1717669884.692, 1717669900.726, 1717669917.761, 1717669935.798, 1717669951.835, 1717669971.878, 1717669995.916, 1717670018.953, 1717670038.99, 1717670062.033, 1717670079.061, 1717670094.092, 1717670113.132, 1717670130.162, 1717670153.199, 1717670172.23, 1717670188.261, 1717670204.29, 1717670226.329, 1717670249.368, 1717670264.393, 1717670287.432, 1717670308.471, 1717670325.519, 1717670347.561, 1717670362.586, 1717670384.627, 1717670406.664, 1717670430.702, 1717670449.737, 1717670471.774, 1717670491.804, 1717670508.834, 1717670526.873, 1717670546.906, 1717670564.938, 1717670587.982, 1717670609.014, 1717670625.038, 1717670646.068, 1717670665.109, 1717670683.145, 1717670698.169, 1717670722.21, 1717670741.249, 1717670756.278, 1717670779.313, 1717670800.352, 1717670815.394, 1717670833.425, 1717670851.464, 1717670872.513, 1717670892.557, 1717670916.602, 1717670937.645, 1717670952.678, 1717670968.712, 1717670991.768, 1717671008.807, 1717671032.839, 1717671056.881, 1717671076.919, 1717671098.955, 1717671118.99, 1717671135.028, 1717671153.071, 1717671170.104, 1717671186.135, 1717671203.167, 1717671225.207, 1717671245.239, 1717671269.277, 1717671291.315, 1717671306.35, 1717671326.383, 1717671344.416, 1717671363.45, 1717671386.49, 1717671404.518, 1717671425.554, 1717671442.579, 1717671461.612, 1717671482.646, 1717671505.697, 1717671529.749, 1717671551.779]  # 未定義の場合は、下でcsvから読み込む # このリストの長さはtrial_numsと一致する必要がある
#start_time_list =[1717839336.974, 1717839359.055, 1717839380.11, 1717839399.148, 1717839415.184, 1717839439.222, 1717839455.257, 1717839475.307, 1717839496.352, 1717839514.385, 1717839533.43, 1717839548.455, 1717839565.483, 1717839580.514, 1717839604.579, 1717839620.606, 1717839637.643, 1717839655.672, 1717839671.7, 1717839691.739, 1717839715.788, 1717839738.849, 1717839758.886, 1717839781.928, 1717839798.957, 1717839813.985, 1717839833.023, 1717839850.054, 1717839873.094, 1717839892.124, 1717839908.156, 1717839924.192, 1717839946.22, 1717839969.253, 1717839984.28, 1717840007.325, 1717840028.364, 1717840045.387, 1717840067.42, 1717840082.452, 1717840104.492, 1717840126.525, 1717840150.56, 1717840169.587, 1717840191.626, 1717840211.656, 1717840228.683, 1717840246.717, 1717840266.752, 1717840284.78, 1717840307.811, 1717840328.845, 1717840344.871, 1717840365.907, 1717840384.948, 1717840402.972, 1717840417.995, 1717840442.031, 1717840461.058, 1717840476.081, 1717840499.115, 1717840520.153, 1717840535.186, 1717840553.215, 1717840571.246, 1717840592.29, 1717840612.334, 1717840636.38, 1717840657.413, 1717840672.437, 1717840688.46, 1717840711.502, 1717840728.53, 1717840752.569, 1717840776.61, 1717840796.64, 1717840818.674, 1717840838.701, 1717840854.73, 1717840872.759, 1717840889.783, 1717840905.805, 1717840922.829, 1717840944.867, 1717840964.892, 1717840988.934, 1717841010.966, 1717841025.991, 1717841046.019, 1717841064.05, 1717841083.082, 1717841106.115, 1717841124.155, 1717841145.191, 1717841162.214, 1717841181.241, 1717841202.283, 1717841225.327, 1717841249.361, 1717841271.394]
print(len(start_time_list))
# CSVデータを読み込む
if len(start_time_list)==0:
    df = pd.read_csv(csv_path, delimiter='\t')
    # actionが'trial_start'の行をフィルタリング
    trial_start_df = df[df['action'] == 'trial_start']
    # time列のみを取得してリストに変換
    start_time_list = trial_start_df['time'].tolist()
    
    
if len(start_time_list) != len(trial_nums):
    raise ValueError("長さが一致しません。start_time_listの長さ: {}, trial_numsの長さ: {}".format(len(start_time_list), len(trial_nums)))


# HDF5ファイルを読み書きモードで開く
with h5py.File(hdf5_path, 'r+') as file:
    # 各trial_numに対して処理
    for i, trial_num in enumerate(trial_nums):
        # 3桁にフォーマット
        formatted_trial_num = f"{trial_num:03d}"
        # trial_start データセットのパス
        start_time_path = f"trial_data/{formatted_trial_num}/trial_start"
        #print(start_time_path)
        # 開始時間をデータセットに書き込む
        if start_time_path in file:
            # データセットが存在する場合、値を更新
            file[start_time_path][()] = start_time_list[i]
        else:
            # データセットが存在しない場合、新規に作成
            file.create_dataset(start_time_path, data=np.array([start_time_list[i]]))

print("各trialの開始時間の更新が完了しました")
i=0

# CSVデータを読み込む
df = pd.read_csv(csv_path, delimiter=',')

# HDF5ファイルを開く
with h5py.File(hdf5_path, 'r+') as file:
    # 各trial_numに対して処理
    for trial_num_in_df in df['trial_num'].unique():
        # trial_startの時刻を取得
        #print(i)
        trial_num=trial_num_in_df-1
        if trial_num > max(trial_nums):
            break
        print(trial_num)
        
        trial_start = file[f"trial_data/{trial_num:03d}/trial_start"][()]
        
        # actionごとのデータを処理
        for action in ['Lick', 'NP0', 'NP1', 'NP2', 'NP3', 'NP4']:
            # 対応するactionの行をフィルタリング
            action_df = df[(df['trial_num'] == trial_num_in_df) & (df['action'] == action)]
            # データセットのパス
            data_path = f"trial_data/{trial_num:03d}/{action}"
            if data_path in file:
                # データセットの現在のデータを取得
                data_array = file[data_path][()]
                # 各時刻について処理
                for _, row in action_df.iterrows():
                    time_index = int((row['time'] - trial_start) * 10)  # 20 Hzに基づいてインデックスを計算
                    print(time_index)
                    
                    print(len(data_array))
                    #if 0 <= time_index < len(data_array):
                    data_array[time_index] = 1  # 値を1に更新
                    print(data_array)
                # 更新されたデータでデータセットを上書き
                file[data_path][...] = data_array
                
                
import shutil

# 入力ファイルを変更した後に、そのファイルを出力ファイルパスにコピー
shutil.copy(input_filename, output_filename)


print("データの更新が完了しました")

